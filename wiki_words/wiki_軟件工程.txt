软件工程

















商用軟體工程範例




软件开发过程


核心行动




过程
需求
设计
工程
构造（英语：Software construction）
测试
调试
部署
維護




范式与模式




原型设计（英语：Software prototyping）
净室（英语：Cleanroom software engineering）
增量建模（英语：Incremental build model）
瀑布模型
敏捷软件开发
螺旋模型




方法论与框架




快速應用程式開發
DevOps
极限编程
团队软件流程（英语：Team software process）
個人軟體程序
动态系统开发方法（英语：Dynamic systems development method）
MSF（英语：Microsoft Solutions Framework）
Scrum
看板
V模型（英语：V-Model (software development)）
FDD（英语：Feature-driven development）


MDD（英语：Model-driven_development）
迭代式开发
精益开发
开发运维一体化
统一流程（英语：Unified Process）




支持行为




配置管理
文档
质量保证
项目管理（英语：Software project management）
用户体验




实践




ATDD（英语：Acceptance test–driven development）
行为驱动开发
持續整合
持續交付
DDD（英语：Domain-driven design）
结对编程
站会
测试驱动开发




工具




編譯器
调试工具
性能分析
GUI设计器（英语：Graphical user interface builder）
建模（英语：UML tools）
集成开发环境
組建自動化
发布自动化（英语：Application release automation）
测试




标准与知识体系




能力成熟度模型集成
IEEE标准（英语：IEEE_Standards_Association）
ISO 9001
ISO/IEC标准（英语：ISO/IEC JTC 1/SC 7）
SWEBOK（英语：SWEBOK）
项目管理知识体系
BABOK（英语：BABOK）







查
论
编





软件工程（英语：Software Engineering[1]）
1968年秋季，NATO（北約）的科技委員會召集了近50名一流的編程人員、計算機科學家和工業界巨頭，討論和制定擺脫“軟體危機”的對策。在那次會議上第一次提出了軟體工程（software engineering）這個概念，研究和应用如何以系统性的、规范化的、可定量的过程化方法去开发和维护软件，以及如何把经过时间考验而证明正确的管理技术和当前能够得到的最好的技术方法结合起来的学科。它涉及到程序设计语言、数据库、软件开发工具、系统平台、标准、设计模式等方面。其后的几十年里，各种有关软件工程的技术、思想、方法和概念不断被提出，软件工程逐步发展为一门独立的科学。
1993年，IEEE(Institute of Electrical & Electronic Engineers,电子和电子工程师学会)给出了一个更加综合的定义："将系统化的、规范的、可度量的方法用于软件的开发、运行和维护的过程，即将工程化应用于软件开发中"。此后，IEEE多次给出软件工程的定义。
在现代社会中，软件应用于多个方面。典型的软件比如有电子邮件、嵌入式系统、人机界面、办公套件、操作系统、编译器、数据库、游戏等。同时，各个行业几乎都有计算机软件的应用，比如工业、农业、银行、航空、政府部门等。这些应用促进了经济和社会的发展，提高人们的工作效率，同时提升了生活质量。
软件工程师是对应用软件创造软件的人们的统称，软件工程师按照所处的领域不同可以分为系统分析师、系统架构师、软件设计师、程序员、测试工程师、界面与交互设计师等等。人们也常常用程序员来泛指各种软件工程师。



目录


1 名稱由來與定義

1.1 软件危机
1.2 由來
1.3 定義


2 軟體工程的核心知識（SWEBOK）
3 软件工程与计算机科学
4 軟體工程的現況
5 沒有銀彈與人月神話
6 软件工程与计算机程序设计
7 软件开发过程
8 方法学
9 软件工程的发展方向
10 分支學科
11 相關學科

11.1 系統工程
11.2 電腦軟體工程師


12 参考文献
13 外部链接
14 参见



名稱由來與定義[编辑]
軟體工程包括兩種構面：軟體開發技術和軟體專案管理。[1]

軟體開發技術：軟體開發方法學、軟體工具和軟體工程環境。[1]
軟體專案管理：軟體度量、項目估算、進度控制、人員組織、配置管理、項目計畫等。[1]

软件危机[编辑]
主条目：软件危机
1970年代和1980年代的软件危机。在那个时代，許多軟體最后都得到了一个悲惨的结局，軟體项目开发时间大大超出了规划的时间表。一些项目导致了财产的流失，甚至某些软件导致了人员伤亡。同时软件开发人员也发现软件开发的难度越来越大。在軟體工程界被大量引用的案例是Therac-25的意外：在1985年六月到1987年一月之間，六個已知的醫療事故來自於Therac-25錯誤地超過劑量，導致患者死亡或嚴重輻射灼傷[2]。
由來[编辑]
鑒於軟體開發時所遭遇困境，北大西洋公約組織（NATO）在1968年舉辦了首次軟體工程學術會議[3]，並於會中提出「軟體工程」來界定軟體開發所需相關知識，並建議「軟體開發應該是類似工程的活動」。軟體工程自1968年正式提出至今，這段時間累積了大量的研究成果，廣泛地進行大量的技術實踐，藉由學術界和產業界的共同努力，軟體工程正逐漸發展成為一門專業學科。
定義[编辑]

关于软件工程的定义，在GB/T11457-2006《信息技术 软件工程术语》中将其定义为"应用计算机科学理论和技术以及工程管理原则和方法，按预算和进度，实现满足用户要求的软件产品的定义、开发、和维护的工程或进行研究的学科"。

包括：

創立與使用健全的工程原則，以便經濟地獲得可靠且高效率的軟體。[4]
應用系統化，遵從原則，可被計量的方法來發展、操作及維護軟體；也就是把工程應用到軟體上。[5]
與開發、管理及更新軟體產品有關的理論、方法及工具。[6]
一種知識或學科，目標是生產品質良好、準時交貨、符合預算，並滿足用戶所需的軟體。[7]
實際應用科學知識在設計、建構電腦程式，與相伴而來所產生的文件，以及後續的操作和維護上。[8]
使用與系統化生產和維護軟體產品有關之技術與管理的知識，使軟體開發與修改可在有限的時間與費用下進行。[9]
建造由工程師團隊所開發之大型軟體系統有關的知識學科。[10]
對軟體分析、設計、實施及維護的一種系統化方法。[11]
系統化地應用工具和技術於開發以计算机為主的應用。[12]
軟體工程是關於設計和開發優質軟體。[13]

軟體工程的核心知識（SWEBOK）[编辑]
　ACM與IEEE Computer Society聯合修定的SWEBOK[14]（Software Engineering Body of Knowledge）提到，軟體工程領域中的核心知識包括：

軟體需求（Software requirements）
軟體設計（Software design）
軟體建構（Software construction）
軟體測試（Software test）
軟體維護與更新（Software maintenance）
軟體構型管理（Software Configuration Management, SCM）
軟體工程管理（Software Engineering Management）
軟體開發過程（Software Development Process）
軟體工程工具與方法（Software Engineering Tools and methods）
軟體品質（Software Quality）

软件工程与计算机科学[编辑]
参见：软件工程主题列表
软件的开发到底是一门科学还是一门工程，这是一个被争论了很久的问题。实际上，软件开发兼有两者的特点。但是这并不意味着它们可以被互相混淆。很多人认为软件工程基于计算机科学和信息科学就如传统意义上的工程学之于物理和化学一样。在美国，大约40%的软件工程师具有计算机科学的学位。在世界其他地方，这个比例也差不多。他们并不一定会每天使用计算机科学方面的知识，但是他们每天都会使用软件工程方面的知识。

軟體工程與電腦科學的差別[15]


軟體工程
電腦科學


目標
在時間、資源、人員這3個主要限制條件下構建滿足用戶需求的軟體系統。
探索正確的計算和建模方法，從而改進計算方法本身。


產品
軟體（比如辦公套件和編譯器）。
演算法（比如希爾排序法）和抽象的問題（比如哲學家進餐問題）。


進度與時間表
軟體專案都有特定的進度與時間表
研究專案一般不具有設定的進度與時間表


關注點
軟體工程關注如何為用戶實現價值。
軟體理論關注的是軟體本身運行的原理，比如時間複雜度，空間複雜度，和演算法的正確性。


變化程度
隨著技術和用戶需求的不斷變化，軟體開發人員必須時刻調整自己的開發以適應當前的需求。同時軟體工程本身也處於不斷的發展中。
對於某一種特定問題的正確解決方法將永遠不會改變。


需要的其他知識
相關領域的知識。
數學。


著名的探索者和教育家
Barry Boehm，David Parnas，佛瑞德·布魯克斯。
Edsger Dijkstra，高德纳，Robert Tarjan，Peter Slater，艾伦·图灵，姚期智。


著名的實踐者
John Backus，Dan Bricklin，蒂姆·伯纳斯-李，林纳斯·托瓦兹，理查德·马修·斯托曼。
無。


例如Peter McBreen認為，軟體工程意味著更高程度的嚴謹性與經過驗證的流程，並不適合現階段各類型的軟體開發。Peter McBreen在著作《Software Craftsmanship: The New Imperative》提出了所謂「craftsmanship」的說法，認為現階段軟體開發成功的關鍵因素，是開發者的技能，而不是「manufacturing」軟體的流程。
軟體工程的現況[编辑]
Capers Jones曾對美國軟體組織的績效做過評估，所得到結論是：軟體工程的專業分工不足，是造成品質低落、時程延誤、預算超支的最關鍵因素。[16]
2003年，The Standish Group年度報告指出，在他們調查的13522個專案中，有66％的軟體專案失敗、82％超出時程、48％推出時缺乏必需的功能，總計約550億美元浪費在不良的計畫、預算或軟體估算上。[17]
沒有銀彈與人月神話[编辑]
主条目：没有银弹和人月神话
在1986年，IBM大型电脑之父佛瑞德·布魯克斯发表了他的著名论文《没有银弹》，在这篇著名的论文中他断言：“在10年内无法找到解决软件危机的银弹”[18]。从软件危机被提出以来。人们一直在寻找解决它的方法。于是一系列的方法被提出并且加以应用。比如結構化程式設計，面向对象的开发，CMM，UML等等。佛瑞德·布魯克斯著名作品还有《人月神话》。
布魯克斯在《人月神話：軟體專案管理之道（The Mythical Man-Month）》提到，將沒有銀子彈（silver bullet）可解決，開發軟體的困難是內生的，只能漸進式的改善。整體環境沒有改變以前，唯一可能的解，是依靠人的素質，培養優秀的工程師。[19]
软件工程与计算机程序设计[编辑]
软件工程存在于各种应用中，存在于软件开发的各个方面。而程序设计通常包含了程序设计和编码的反复迭代的过程，它是软件开发的一个阶段。
软件工程力图对软件项目的各个方面作出指导，从软件的可行性分析直到软件完成以后的维护工作。软件工程认为软件开发与各种市场活动密切相关。比如软件的销售，用户培训，与之相关的软件和硬件安装等。软件工程的方法学认为一个独立的程序员不应当脱离团队而进行开发，同时程序的编写不能够脱离软件的需求，设计，以及客户的利益。
软件工程的发展是计算机程序设计工业化的体现。
软件开发过程[编辑]
主条目：软件开发过程
软件开发过程是随着开发技术的演化而随之改进的。从早期的瀑布式（Waterfall）的开发模型到后来出现的螺旋式的迭代（Spiral）开发，以致最近开始兴起的敏捷軟體開發（Agile），他们展示出了在不同的时代软件产业对于开发过程的不同的认识，以及对于不同类型项目的理解方法。
注意区分软件开发过程和软件过程改进之间的重要区别。诸如像ISO 15504, ISO 9000, CMM, CMMI这样的名词阐述的是一些软件过程改进框架，他们提供了一系列的标准和策略来指导软件组织如何提升软件开发过程的质量、软件组织的能力，而不是给出具体的开发过程的定义。
方法学[编辑]
软件工程的方法有很多方面的意义。包括项目管理，分析，设计，程序的编写，测试和质量控制。
软件设计方法可以区别为重量级的方法和轻量级的方法。重量级的方法中产生大量的正式文档。
著名的重量级开发方法包括ISO 9000，CMM，和统一软件开发过程（RUP）。
轻量级的开发过程没有对大量正式文档的要求。著名的轻量级开发方法包括极限编程（XP）和敏捷过程（Agile Processes）。
根据《新方法学》这篇文章的说法，重量级方法呈现的是一种“防御型”的姿态。在应用“重量级方法”的软件组织中，由于软件项目经理不参与或者很少参与程序设计，无法从细节上把握项目进度，因而会对项目产生“恐惧感”，不得不要求程序员不断撰写很多“软件开发文档”。而轻量级方法则呈现“进攻型”的姿态，这一点从XP方法特别强调的四个准则—“沟通、简单、反馈和勇气”上有所体现。目前有一些人认为，“重量级方法”适合于大型的软件团队（数十人以上）使用，而“轻量级方法”适合小型的软件团队（几人、十几人）使用。当然，关于重量级方法和轻量级方法的优劣存在很多争论，而各种方法也在不断进化中。
一些方法论者认为人们在开发中应当严格遵循并且实施这些方法。但是一些人并不具有实施这些方法的条件。实际上，采用何种方法开发软件取决于很多因素，同时受到环境的制约。
软件工程的发展方向[编辑]
“敏捷开发”（Agile Development）被认为是软件工程的一个重要的发展。它强调软件开发应当是能够对未来可能出现的变化和不确定性作出全面反应的。
敏捷开发被认为是一种“轻量级”的方法。在轻量级方法中最负盛名的应该是“极限编程”（Extreme Programming，简称为XP）。而与轻量级方法相对应的是“重量级方法”的存在。重量级方法强调以开发过程为中心，而不是以人为中心。重量级方法的例子比如CMM/PSP/TSP。
面向方面的程序設計（Aspect Oriented Programming，简称AOP）被认为是近年来软件工程的另外一个重要发展。这里的方面指的是完成一个功能的对象和函数的集合。在这一方面相关的内容有泛型编程（Generic Programming）和模板。
分支學科[编辑]
相關學科[编辑]
系統工程[编辑]
系统工程師主要處理系統的整體需求和設計，包括硬體與人力問題。
電腦軟體工程師[编辑]
参考文献[编辑]


^ 1.0 1.1 1.2 1.3 軟體工程(Software Engineering;SE). 勤益科技大學. [2015-02-24] （中文（台灣）‎）. 寫程式的難度愈來愈低，因為程式語言越來越高階，API 越來越多，開發工具越來越好用，寫程式的門檻自然就大大地降低了。想要開發出有價值的中大型系統，軟體工程就很重要了，以蓋房子來說，你可以隨便找一兩個工人用磚或木材來蓋一棟矮房，但是如果想蓋一百多層樓的101大樓，你非得有良好的工程規劃不可，軟體不也是如此？程式設計師名片上的頭銜都是工程師，雖然和建築工程師、機械工程師... 一樣都被稱為工程師，但比較起來，軟體產業的工程師卻是最不工程導向的。 
^ An Investigation of the Therac-25 Accidents
^ http://www.ntut.edu.tw/~jykuo/se.html
^ F. L. Bauer, NATO Software Engineering Conference, 1968.
^ IEEE標準電腦字典，610.12，1990
^ I. Sommerville, Software Engineering, 7th ed.:Addison-Wesley Longman Publishing Co., Inc. Boston, MA, USA, 2004.
^ S. R. Schach, Software Engineering: Asken Associates Pacific Palisades, CA, USA, 1990.
^ B. W. Boehm, Software Engineering Economics: Prentice Hall PTR Upper Saddle River, NJ, USA, 1981.
^ R. Fairley, Software Engineering Concepts: McGraw-Hill, Inc. New York, NY, USA, 1985.
^ C. Ghezzi, M. Jazayeri, and D. Mandrioli, Fundamentals of Software Engineering, 2nd ed.: Prentice Hall, 2002.
^ The Free On-Line Dictionary of Computing, http://foldoc.org/
^ S. A. Conger, The New Software Engineering: Course Technology Press United States, 1993.
^ S. L. Pfleeger, Software Engineering: the Production of Quality , 2nd.: Macmillan Publishing Co., Inc. Indianapolis, IN, USA, 1991.
^ index • IEEE Computer Society. Computer.org. 2004-02-06 [2016-04-28]. 
^ P. McBreen, Software Craftmanship: The New Imperative: Addsion-Wesley Professional, 2001.
^ C. Jones Programmer Productivity: McGraw-Hill, Inc. New York, NY, USA, 1985
^ Chaos Report, The Standish Group, 2003.
^ 原文：There will be no silver bullet within ten years
^ Brooks原文：「我認為軟體困難的部份是在建立規格、設計，並驗證其構思，而不是在表達和測試其實作」


外部链接[编辑]
（中文）

SEAT社團法人台灣軟體工程學會
沒人在乎軟體工程
軟體工程的弔詭

（英文）

http://www.computer.org/portal/web/swebok
http://www.abet.org/
http://www.computer.org/certification/
http://systemsguide.com/GuildSite/TDM/certification.html

参见[编辑]


软件主题
工程主题
软件测试主题
计算机科学主题
信息技术主题



软件
软件开发
软件测试
项目管理
系统工程










查
论
编


軟體工程






领域



需求分析
系統分析
軟體設計
電腦編程
形式化方法
軟體測試
軟體部署
軟體維護








概念



数据建模
企业架构
功能规格（英语：Functional specification）
建模语言（英语：Modeling language）
编程范型
软件
软件架构
程序设计方法学
软件开发过程
项目生命周期
软件质量
软件质量保证
軟體考古學
軟體驗證及確認
结构化分析








導向



敏捷
觀點導向
面向对象
本体论
面向服务
SDLC








模型




开发模型



敏捷
迭代模式
RUP
Scrum
螺旋模型
瀑布模型
XP
V模型
混沌模型








其他模型



Automotive SPICE
CMMI
数据模型
ER模型
Function model
信息模型
元建模
对象模型（英语：Object model）
系统模型（英语：Systems modeling）
视图模型（英语：View model）








建模语言



IDEF
UML
SysML











软件
工程师



肯特·貝克
葛來迪·布區
佛瑞德·布魯克斯
Barry Boehm
沃德·坎宁安
奧利-約翰·達爾
Tom DeMarco
艾兹格·迪杰斯特拉
马丁·福勒
東尼·霍爾
Watts Humphrey
Michael A. Jackson
伊瓦爾·雅各布森
Craig Larman
James Martin
伯特蘭·邁耶
David Parnas
Winston W. Royce
詹姆士·蘭寶
尼克劳斯·维尔特
愛德華·尤登
Victor Basili








相关领域



计算机科学
计算机工程
企业工程
軟體工程史
管理學
數學
專案管理
品質管理
风险管理
人因工程學
系統工程











 分类
 维基共享
















查
论
编


技术






領域




農業



农业工程
水產養殖
水产学
食品化学
食品工程
营养学
食品技术
食品微生物学（英语：Food microbiology）
遺傳利用限制技術（英语：Genetic use restriction technology）








生物医学（英语：Biomedical technology）



生物信息学
生物医学工程
生物工程学
生物技术
健康科学
生化檢驗
药理学
神经科学
组织工程学
基因工程
纳米医学
化学信息学








水利/土木建築



水利工程
土木工程
建築工程
建築設備
消防工程
安全工程
結構工程








教育技术



在线学习
教育技术学
教育软件（英语：Educational software）
虚拟校园（英语：Virtual campus）








能源



核工程
核技术
储能技术
石油工程（英语：Petroleum engineering）








军事



彈藥
炸彈
軍事技术
電子作戰
低可偵測性技術
工兵
军事通信（英语：Military communications）








信息



人工智能
計算機工程
计算机科学
音乐工艺
通信工程
通信
图形
信息技术
軟件工程
音乐
语音识别
可视化技术
系统分类学
本体工程
信息学








工业（英语：Industrial technology）



纳米科技
音频工程
生物工程
生化工程
陶瓷工程
化学工程
控制工程
低温学
電機工程學
电子工程
工程技术
工程学
工业工程学
企业工程
水力学
机械工程
機械電子學
冶金工程
海洋工程
光学工程
系统工程
运输工程
电动机械学
金融工程学
制造
机械
采矿业
自动化技术
冶金学








交通



航空航天
航空航天工程
空间技术
机动车
車輛工程
交通工程
流量工程








環境科技



綠色建築
可再生能源
永續設計
环境工程
生態工程
潔淨科技（英语：Clean technology）
生態技術（英语：Ecotechnology）
環境工程科學（英语：Environmental engineering science）








应用科学



考古
电子学
光学
半导体物理学
环境科学
材料科学
微系统
微技术
纳米技术








其他领域



机器人学
机械电子学
蛋白质工程
系统工程
聚合物工程（英语：Polymer engineering）











組件



基礎設施
發明
发明年表
知識
機器
技能
工艺
工具








技術史



新石器革命
工業革命
第二次工業革命
數字化革命
第三次工業革命
信息時代
史前技术（英语：Outline of prehistoric technology）
古代技術（英语：Ancient technology）
中世紀技術（英语：Medieval technology）
文藝復興技術（英语：Renaissance technology）
噴氣時代（英语：Jet Age）








理論（英语：Theories of technology）
和概念



適用技術
破壞性創新
高科技
技术成熟度曲线
专家统治
技术决定论
技術官僚
技术奇异点
技术接受模型
超人类主义
軍民兩用技術（英语：Dual-use technology）
技术伦理（英语：Ethics of technology）








其他



新興技術列表
卡尔达肖夫指数
Category:各国科技
Category:科技公司
Category:技术大学和学院
技术传播者
技术新闻学











 Category:技術
 commons:Category:技術
 Portal:技術
















查
论
编


電腦科學的主要领域







注：该模板大致遵循ACM-2012计算分类系统。






电脑硬件



印刷电路板
外部设备
集成电路
超大规模集成电路
绿色计算
電子設計自動化








系统架构组织



電腦系統架構
嵌入式系统
实时计算








网络



网络传输协议
路由
网络拓扑
网络服务








软件组织



直譯器
中间件
虛擬機器
操作系统
软件质量








软件符号和工具



编程范型
编程语言
編譯器
领域特定语言
軟體框架
集成开发环境
软件配置管理
函式庫








软件开发



软件开发过程
需求分析
软件设计
软件部署
軟體維護
开源模式








计算理论



自动机
可计算性理论
计算复杂性理论
量子计算
数值计算方法
计算机逻辑
形式语义学








算法



算法分析
算法设计
随机化算法
计算几何








计算数学

离散数学 · 概率 · 统计学 · 数学软件 · 数理逻辑 · 集合论 · 数论 · 图论 · 类型论 · 范畴论 · 信息论 · 数值分析 · 数学分析






信息系统



数据库管理系统
電腦數據
企业信息系统（英语：Enterprise information system）
社会性软件
地理信息系统
决策支持系统
过程控制
数据挖掘
數位圖書館
系统平台
數位行銷
万维网
信息檢索








安全



密码学
形式化方法
入侵检测系统
网络安全
信息安全








人机交互

计算机辅助功能 · 用户界面 · 可穿戴计算机 · 普适计算 · 虚拟现实 · 聊天機器人






并发性



并发计算
并行计算
分布式计算
多线程
多元處理








人工智能

自动推理 · 计算语言学 · 计算机视觉 · 进化计算 · 专家系统 · 自然语言处理 · 机器人学






机器学习



監督式學習
非監督式學習
强化学习
交叉驗證








计算机图形学



计算机动画
可视化
渲染
修飾照片
圖形處理器
混合现实
虚拟现实
图像处理
图像压缩
实体造型








应用计算



电子商务
企业级软件
计算数学
计算物理学
计算化学
计算生物学
計算社會科學
医学信息学
数字艺术
電子出版
網絡戰
电子游戏
文字处理器
運籌學
教育技术学
生物信息学
认知科学
文件管理系统（英语：Document management system）











 分类
 主题
专题
 维基共享













规范控制



LCCN: sh87007398
GND: 4116521-4
BNF: cb11966616k（数据）
NDL: 01014113
BNE: XX541523












分类：软件开发软件工程系统工程隐藏分类：包含规范控制信息的维基百科条目
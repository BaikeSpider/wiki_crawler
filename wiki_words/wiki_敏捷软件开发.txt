敏捷软件开发


软件开发过程


核心行动




过程
需求
设计
工程
构造（英语：Software construction）
测试
调试
部署
維護




范式与模式




原型设计（英语：Software prototyping）
净室（英语：Cleanroom software engineering）
增量建模（英语：Incremental build model）
瀑布模型
敏捷软件开发
螺旋模型




方法论与框架




快速應用程式開發
DevOps
极限编程
团队软件流程（英语：Team software process）
個人軟體程序
动态系统开发方法（英语：Dynamic systems development method）
MSF（英语：Microsoft Solutions Framework）
Scrum
看板
V模型（英语：V-Model (software development)）
FDD（英语：Feature-driven development）


MDD（英语：Model-driven_development）
迭代式开发
精益开发
开发运维一体化
统一流程（英语：Unified Process）




支持行为




配置管理
文档
质量保证
项目管理（英语：Software project management）
用户体验




实践




ATDD（英语：Acceptance test–driven development）
行为驱动开发
持續整合
持續交付
DDD（英语：Domain-driven design）
结对编程
站会
测试驱动开发




工具




編譯器
调试工具
性能分析
GUI设计器（英语：Graphical user interface builder）
建模（英语：UML tools）
集成开发环境
組建自動化
发布自动化（英语：Application release automation）
测试




标准与知识体系




能力成熟度模型集成
IEEE标准（英语：IEEE_Standards_Association）
ISO 9001
ISO/IEC标准（英语：ISO/IEC JTC 1/SC 7）
SWEBOK（英语：SWEBOK）
项目管理知识体系
BABOK（英语：BABOK）







查
论
编





敏捷软件开发（英语：Agile software development），又稱敏捷开发，是一種從1990年代開始逐渐引起广泛关注的一些新型软件开发方法，是一种应对快速变化的需求的一种软件开发能力。它们的具体名称、理念、过程、术语都不尽相同，相对于「非敏捷」，更强调程序员团队与业务专家之间的紧密协作、面对面的沟通（认为比书面的文档更有效）、频繁交付新的软件版本、紧凑而自我组织型的团队、能够很好地适应需求变化的代码编写和团队组织方法，也更注重软件开发過程中人的作用。



目录


1 词源
2 价值观
3 原则
4 对比其他的方法

4.1 对比迭代方法
4.2 对比瀑布式开发


5 敏捷方法的适用性
6 用於敏捷开发团队的项目管理工具
7 方法列表
8 敏捷技术
9 参考文献
10 外部链接



词源[编辑]
敏捷一词来源于2001年初美国犹他州雪鸟滑雪圣地的一次敏捷方法发起者和实践者（他们发起组成了敏捷联盟）的聚会。
价值观[编辑]
雪鸟会议共同起草了敏捷软件开发宣言。其中最重要的部分就是对一些与会者一致同意的软件开发价值观的表述。[1][2] 其中包括了以下方针：

个体和互动：高于 流程和工具。
工作的软件：高于 详尽的文档。
客户合作：高于 合同谈判。
响应变化：高于 遵循计划。

雖然他們也很重視右邊的內容，但是更重視左邊的內容。
原则[编辑]
宣言中还包括以下原则：[3] [4]

对我们而言，最重要的是通过尽早和不断交付有价值的软件满足客户需要。
我们欢迎需求的变化，即使在开发后期。敏捷过程能够驾驭变化，保持客户的竞争优势。
经常交付可以工作的软件，从几星期到几个月，时间尺度越短越好。
业务人员和开发者应该在整个项目过程中始终朝夕在一起工作。
围绕斗志高昂的人进行软件开发，给开发者提供适宜的环境，满足他们的需要，并相信他们能够完成任务。
在开发小组中最有效率也最有效果的信息传达方式是面对面的交谈。
可以工作的软件是进度的主要度量标准。
敏捷过程提倡可持续开发。出资人、开发人员和用户应该总是维持不变的节奏。
对卓越技术与良好设计的不断追求将有助于提高敏捷性。
简单——尽可能减少工作量的艺术至关重要。
最好的架构、需求和设计都源自自我组织的团队。
每隔一定时间，团队都要总结如何更有效率，然后相应地调整自己的行为。

对比其他的方法[编辑]
敏捷方法有时候被误认为是无计划性和纪律性的方法，实际上更确切的说法是敏捷方法强调适应性而非预见性。
适应性的方法集中在快速适应现实的变化。当项目的需求起了变化，团队应该迅速适应。这个团队可能很难确切描述未来将会如何变化.
对比迭代方法[编辑]
相比迭代式开发两者都强调在较短的开发周期提交软件，敏捷方法的周期可能更短，并且更加强调队伍中的高度协作。
对比瀑布式开发[编辑]
两者没有很多的共同点，瀑布模型是最典型的预见性的方法，严格遵循预先计划的需求、分析、设计、编码、测试的步骤顺序进行。步骤成果作为衡量进度的方法，例如需求规格，设计文档，测试计划和代码审阅等等。
瀑布式的主要的问题是它的严格分级导致的自由度降低，项目早期即作出承诺导致对后期需求的变化难以调整，代价高昂。瀑布式方法在需求不明并且在项目进行过程中可能变化的情况下基本是不可行的。
相对来讲，敏捷方法则在几周或者几个月的时间内完成相对较小的功能，强调的是能将尽早将尽量小的可用的功能交付使用，并在整个项目周期中持续改善和增强。
有人可能在这样小规模的范围内的每次迭代中使用瀑布式方法，另外的人可能将选择各种工作并行进行，例如极限编程。
敏捷方法的适用性[编辑]
在敏捷方法其独特之处以外，他和其他的方法也有很多共同之处，比如迭代开发，关注互动沟通，减少中介过程的无谓资源消耗。通常可以在以下方面衡量敏捷方法的适用性：从产品角度看，敏捷方法适用于需求萌动并且快速改变的情况，如系统有比较高的关键性、可靠性、安全性方面的要求，则可能不完全适合；从组织结构的角度看，组织结构的文化、人员、沟通则决定了敏捷方法是否适用。跟这些相关联的关键成功因素有：

组织文化必须支持谈判
人员彼此信任
人少但是精干
开发人员所作决定得到认可
环境设施满足成员间快速沟通之需要

最重要的因素恐怕是项目的规模。规模增长，面对面的沟通就愈加困难，因此敏捷方法更适用于较小的队伍，40、30、20、10人或者更少。大规模的敏捷软件开发尚处于积极研究的领域。
另外的问题是项目初期的大量假定或者快速收集需求可能导致项目走入误区，特别是客户对其自身需要毫无概念的情况下。与之类似，人之天性很容易造成某个人成为主导并将项目目标和设计引入错误方向的境况。开发者经常能把不恰当的方案授予客户，并且直到最后发现问题前都能获得客户认同。虽然理论上快速交互的过程可以限制这些错误的发生，但前提是要有效的“负反馈”，否则错误会迅速膨胀，并在最终提交时造成极大返工。
用於敏捷开发团队的项目管理工具[编辑]
已经有一些项目管理工具用於敏捷开发，可以用它们来帮助规划，跟踪，分析和整合工作。 这些工具在敏捷开发中扮演的重要的角色，也是知识管理的一种方法。
通常包括：版本控制整合，进度跟踪，工作分配，集成发布和迭代规划，论坛和软件缺陷的报告和跟踪。
方法列表[编辑]
目前列入敏捷方法的有：

软件开发之韵，Software Development Rhythms
敏捷數據庫技術，AD/Agile Database Techniques
敏捷建模，AM/Agile Modeling
自適應軟件開發，ASD/Adaptive Software Development
水晶方法，Crystal
特性驅動開發，FDD/Feature Driven Development
動態系統開發方法，DSDM/Dynamic Systems Development Method
精益軟件開發，Lean Software Development
AUP（Agile Unified Process）
Scrum
XBreed
極限編程，（Extreme Programming）
探索性測試
ATDD

敏捷技术[编辑]

测试驱动开发，TDD/Test-Driven Development
行为驱动开发，BDD/Behavior-Driven Development
Scrum

参考文献[编辑]


^ 敏捷軟體開發宣言 （中文（繁體）‎）. 
^ 敏捷软件开发宣言 （中文（简体）‎）. 
^ 敏捷宣言背後的原則 （中文（繁體）‎）. 
^ 敏捷宣言遵循的原则 （中文（简体）‎）. 


外部链接[编辑]

敏捷联盟 (英語，Agile Alliance)
敏捷软件开发随笔--专注Scrum+XP
敏捷軟體開發宣言繁體中文版翻譯始末






规范控制



GND: 4806620-5












分类：软件开发软件工程敏捷軟體開發软件开发哲学隐藏分类：包含规范控制信息的维基百科条目
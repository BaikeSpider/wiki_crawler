算法





本条目需要编修，以确保文法、用词、语气、格式、标点等使用恰当。 
请按照校对指引，帮助编辑这个条目。（帮助、讨论） 











应对灯泡不亮的简单算法流程图


在数学（算学）和计算机科学之中，算法/演算法/算则法（algorithm）为任何良定义的具体计算步骤的一个序列[1]，常用于计算、数据处理（英语：Data processing）和自动推理。精确而言，算法是一个表示为有限长[2]列表的有效方法（英语：Effective method）。算法应包含清晰定义的指令[3]用于计算函数[4]。
算法中的指令描述的是一个计算，当其运行（英语：Execution (computing)）时能从一个初始状态和初始输入（可能为空）开始，[5]经过一系列有限[6]而清晰定义的状态最终产生输出[7]并停止于一个终态。一个状态到另一个状态的转移不一定是确定的。随机化算法在内的一些算法，包含了一些随机输入。[8][9]
形式化算法的概念部分源自尝试解决希尔伯特提出的判定问题，并在其后尝试定义有效可计算性（英语：Effective calculability）[10]或者有效方法（英语：Effective method）[11]中成形。这些尝试包括库尔特·哥德尔、雅克·埃尔布朗和斯蒂芬·科尔·克莱尼分别于1930年、1934年和1935年提出的递归函数，阿隆佐·邱奇于1936年提出的λ演算，1936年埃米尔·莱昂·珀斯特（英语：Emil Leon Post）的Formulation 1和艾伦·图灵1937年提出的图灵机。即使在当前，依然常有直觉想法难以定义为形式化算法的情况。[12]



目录


1 历史
2 特征
3 基本要素

3.1 常用设计模式
3.2 常用实现方法


4 形式化算法
5 复杂度

5.1 时间复杂度
5.2 空间复杂度


6 非确定性多项式时间（NP）
7 实现
8 示例

8.1 求最大值算法
8.2 求最大公约数算法


9 分类
10 参考文献
11 外部链接
12 参见



历史[编辑]
算法在中国古代文献中称为“术”，最早出现在《周髀算经》、《九章算术》。特别是《九章算术》，给出四则运算、最大公约数、最小公倍数、开平方根、开立方根、求素数的埃拉托斯特尼筛法，线性方程组求解的算法。三国时代的刘徽给出求圆周率的算法：刘徽割圆术。
自唐代以来，历代更有许多专门论述“算法”的专著：

唐代：《一位算法》 一卷，《算法》 一卷；
宋代：《算法绪论》 一卷、《算法秘诀》 一卷；最著名的是杨辉的《杨辉算法》；
元代：《丁巨算法》；
明代：程大位 《算法统宗》
清代：《开平算法》、《算法一得》、《算法全书》。

而英文名称“algorithm”来自于9世纪波斯数学家花拉子米（比阿勒·霍瓦里松，波斯语：خوارزمی ‎，拉丁转写：al-Khwarizmi），因为比阿勒·霍瓦里松在数学上提出了算法这个概念。“算法”原为“algorism”，即“al-Khwarizmi”的音转，意思是“花拉子米”的运算法则，在18世纪演变为“algorithm”。
欧几里得算法被人们认为是史上第一个算法。
第一次编写程序是爱达·勒芙蕾丝（Ada Byron）于1842年为巴贝奇分析机编写求解解伯努利微分方程的程序，因此爱达·勒芙蕾丝被大多数人认为是世界上第一位程序员[13]。因为查尔斯·巴贝奇（Charles Babbage）未能完成他的巴贝奇分析机，这个算法未能在巴贝奇分析机上执行。
因为“well-defined procedure”缺少数学上精确的定义，19世纪和20世纪早期的数学家、逻辑学家在定义算法上出现了困难。20世纪的英国数学家图灵提出了著名的图灵论题，并提出一种假想的计算机的抽象模型，这个模型被称为图灵机。图灵机的出现解决了算法定义的难题，图灵的思想对算法的发展起到了重要的作用。
特征[编辑]
以下是高德纳在他的著作《计算机程序设计艺术》里对算法的特征归纳：


输入：一个算法必须有零个或以上输入量。
输出：一个算法应有一个或以上输出量，输出量是算法计算的结果。
明确性：算法的描述必须无歧义，以保证算法的实际执行结果是精确地匹配要求或期望，通常要求实际运行结果是确定的。
有限性：依据图灵的定义，一个算法是能够被任何图灵完备系统模拟的一串运算，而图灵机只有有限个状态、有限个输入符号和有限个转移函数（指令）。而一些定义更规定算法必须在有限个步骤内完成任务。
有效性：又称可行性。能够实现，算法中描述的操作都是可以通过已经实现的基本运算执行有限次来实现。

基本要素[编辑]
算法的核心是创建问题抽象的模型和明确求解目标，之后可以根据具体的问题选择不同的模式和方法完成算法的设计。
常用设计模式[编辑]
完全遍历法和不完全遍历法：在问题的解是有限离散解空间，且可以验证正确性和最优性时，最简单的算法就是把解空间的所有元素完全遍历一遍，逐个检测元素是否是我们要的解。这是最直接的算法，实现往往最简单。但是当解空间特别庞大时，这种算法很可能导致工程上无法承受的计算量。这时候可以利用不完全遍历方法——例如各种搜索法和规划法——来减少计算量。
分治法：把一个问题分区成互相独立的多个部分分别求解的思路。这种求解思路带来的好处之一是便于进行并行计算。
动态规划法：当问题的整体最优解就是由局部最优解组成的时候，经常采用的一种方法。
贪婪算法：常见的近似求解思路。当问题的整体最优解不是（或无法证明是）由局部最优解组成，且对解的最优性没有要求的时候，可以采用的一种方法。
线性规划法：见条目。
简并法：把一个问题通过逻辑或数学推理，简化成与之等价或者近似的、相对简单的模型，进而求解的方法。
常用实现方法[编辑]
递归方法与迭代方法
顺序计算、并行计算和分布式计算：顺序计算就是把形式化算法用编程语言进行单线程序列化后执行。
确定性算法和非确定性算法
精确求解和近似求解
形式化算法[编辑]
算法是计算机处理信息的本质，因为计算机程序本质上是一个算法来告诉计算机确切的步骤来执行一个指定的任务，如计算职工的薪水或打印学生的成绩单。一般地，当算法在处理信息时，会从输入设备或数据的存储地址读取数据，把结果写入输出设备或某个存储地址供以后再调用。
复杂度[编辑]
时间复杂度[编辑]
算法的时间复杂度是指算法需要消耗的时间资源。一般来说，计算机算法是问题规模



n


{\displaystyle n}

的函数



f
(
n
)


{\displaystyle f(n)}

，算法的时间复杂度也因此记做





T
(
n
)
=


O


(
f
(
n
)
)


{\displaystyle T(n)={\mathcal {O}}(f(n))}



算法执行时间的增长率与



f
(
n
)


{\displaystyle f(n)}

的增长率正相关，称作渐近时间复杂度（英语：Asymptotic computational complexity），简称时间复杂度。
常见的时间复杂度有：常数阶



O
(
1
)


{\displaystyle O(1)}

，对数阶



O
(
log
⁡
n
)


{\displaystyle O(\log n)}

，线性阶



O
(
n
)


{\displaystyle O(n)}

，线性对数阶



O
(
n
log
⁡
n
)


{\displaystyle O(n\log n)}

，平方阶



O
(

n

2


)


{\displaystyle O(n^{2})}

，立方阶



O
(

n

3


)


{\displaystyle O(n^{3})}

，...，



k


{\displaystyle k}

次方阶



O
(

n

k


)


{\displaystyle O(n^{k})}

,指数阶



O
(

2

n


)


{\displaystyle O(2^{n})}

。随着问题规模



n


{\displaystyle n}

的不断增大，上述时间复杂度不断增大，算法的执行效率越低。
空间复杂度[编辑]
算法的空间复杂度是指算法需要消耗的空间资源。其计算和表示方法与时间复杂度类似，一般都用复杂度的渐近性来表示。同时间复杂度相比，空间复杂度的分析要简单得多。
非确定性多项式时间（NP）[编辑]
主条目：NP (复杂度)
实现[编辑]
算法不单单可以用计算机程序来实现，也可以在人工神经网络、电路或者机械设备上实现。
示例[编辑]
求最大值算法[编辑]
这是算法的一个简单的例子。
我们有一串随机数列。我们的目的是找到这个数列中最大的数。如果将数列中的每一个数字看成是一颗豆子的大小，可以将下面的算法形象地称为“捡豆子”：

首先将第一颗豆子放入口袋中。
从第二颗豆子开始检查，如果正在检查的豆子比口袋中的还大，则将它捡起放入口袋中，同时丢掉原先口袋中的豆子。反之则继续下一颗豆子。直到最后一颗豆子。
最后口袋中的豆子就是所有的豆子中最大的一颗。

以上算法在中国大陆的教科书中通常被叫做“打擂法”或者“循环打擂”[14][15][16]：在一个for循环中，每轮循环都有新的挑战者。若挑战者胜的话，挑战者做新擂主，否则擂主卫冕。for循环结束后输出最后的擂主。
下面是一个形式算法，用ANSI C代码表示


int max(int *array, int size)
{
  int mval = *array;
  int i;
  for (i = 1; i < size; i++)
    if (array[i] > mval)
      mval = array[i];
  return mval;
}

求最大公约数算法[编辑]
求两个自然数的最大公约数 设两个变量



M


{\displaystyle M}

和



N


{\displaystyle N}



如果



M
<
N


{\displaystyle M<N}

，则交换



M


{\displaystyle M}

和



N


{\displaystyle N}






M


{\displaystyle M}

被



N


{\displaystyle N}

除，得到余数



R


{\displaystyle R}


判断



R
=
0


{\displaystyle R=0}

，正确则



N


{\displaystyle N}

即为“最大公约数”，否则下一步
将



N


{\displaystyle N}

赋值给



M


{\displaystyle M}

，将



R


{\displaystyle R}

赋值给



N


{\displaystyle N}

，重做第一步。

用ANSI C代码表示


//交換2數
void swapi(int *x, int *y)
{
  int tmp = *x;
  *x = *y;
  *y = tmp;
}

int gcd(int m, int n)
{
  int r;
  do
  {
    if (m < n)
      swapi(&m, &n);
    r = m % n;
    m = n;
    n = r;
  } while (r);
  return m;
}

利用if函数以及递归则能做出更为精简的代码，更可省去交换的麻烦。（但是也因为递归调用，其空间复杂度提高）


int gcd(int a,int b)
{
    if(a%b)
        return gcd(b,a%b);
    return b;
}

分类[编辑]

基本算法

枚举
搜索

深度优先搜索
广度优先搜索
启发式搜索
遗传算法




数据结构的算法
数论与代数算法
计算几何的算法

凸包算法


图论的算法

哈夫曼编码
树的遍历
最短路径算法
最小生成树算法
最小树形图
网络流算法
匹配算法
分团问题


动态规划
其他

数值分析
加密算法
排序算法
检索算法
随机化算法
关于并行算法，请参阅并行计算一文。



参考文献[编辑]


^ Thomas H. Cormen; Charles E. Leiserson; Ronald L. Rivest; Clifford Stein; 殷建平等译. 第1章 算法在计算机中的作用. 算法导论 原书第3版. 北京: 机械工业出版社. 2013年1月: 3[5]. ISBN 978-7-111-40701-0 （中文）.  引文使用过时参数coauthors (帮助); 使用|accessdate=需要含有|url= (帮助)
^ "Any classical mathematical algorithm, for example, can be described in a finite number of English words"（Rogers 1987:2）.
^ Well defined with respect to the agent that executes the algorithm: "There is a computing agent, usually human, which can react to the instructions and carry out the computations"（Rogers 1987:2）.
^ "an algorithm is a procedure for computing a function（with respect to some chosen notation for integers） ... this limitation (to numerical functions) results in no loss of generality",（Rogers 1987:1）
^ "An algorithm has zero or more inputs, i.e., quantities which are given to it initially before the algorithm begins"（Knuth 1973:5）
^ "A procedure which has all the characteristics of an algorithm except that it possibly lacks finiteness may be called a 'computational method'"（Knuth 1973:5）
^ "An algorithm has one or more outputs, i.e. quantities which have a specified relation to the inputs"（Knuth 1973:5）
^ Whether or not a process with random interior processes (not including the input) is an algorithm is debatable. Rogers opines that: "a computation is carried out in a discrete stepwise fashion, without use of continuous methods or analogue devices... carried forward deterministically, without resort to random methods or devices, e.g., dice" Rogers 1987:2).
^ Whether or not a process with random interior processes (not including the input) is an algorithm is debatable. Rogers opines that: "a computation is carried out in a discrete stepwise fashion, without use of continuous methods or analogue devices ... carried forward deterministically, without resort to random methods or devices, e.g., dice" Rogers 1987:2).
^ Kleene（斯蒂芬·科尔·克莱尼）1943 in Davis 1965:274
^ Rosser（巴克利·罗瑟）1939 in Davis 1965:225
^ Moschovakis, Yiannis N. What is an algorithm?. (编) Engquist, B.; Schmid, W. Mathematics Unlimited—2001 and beyond. Springer. 2001: 919–936 (Part II). 
^ Ada Lovelace honoured by Google doodle. The Guardian. 10 December 2012 [10 December 2012]. 
^ 2.4 赛场统分. 读书频道-IT技术图书-51CTO.COM. 
^ 实验3-9：循环打擂. 湖南科技大学程序设计在线评测（Online Judge）. 
^ 高中,算法与程序设计,教案. 在点网. 



Rogers, Jr, Hartley. Theory of Recursive Functions and Effective Computability. The MIT Press. 1987. ISBN 0-262-68052-1. 
Davis, Martin. The Undecidable: Basic Papers On Undecidable Propositions, Unsolvable Problems and Computable Functions. New York: Raven Press. 1965. ISBN 0-486-43228-9.  Davis此书中有列出许多相关的论文，包括哥德尔、邱奇、图灵、巴克利·罗瑟（英语：Rosser）、斯蒂芬·科尔·克莱尼及埃米尔·波斯特（英语：Emil Post）的论文。在参考文献中也会列出原作者的姓名。

外部链接[编辑]

20世纪十大算法
算法笔记
计算几何算法概览

参见[编辑]


计算机科学主题
计算机程序设计主题



抽象机器
垃圾进，垃圾出
算法导论
计算理论

可计算性理论
计算复杂性理论


高级综合










查
论
编


算法






排序




比较排序



冒泡排序
选择排序
插入排序
希尔排序
快速排序
归并排序
堆排序
鸡尾酒排序
梳排序
侏儒排序（英语：Gnome sort）
图书馆排序
内省排序
奇偶排序








线性时间排序



鸽巢排序
基数排序
计数排序
桶排序








并行排序



排序网络（英语：Sorting network）
Batcher归并网络








不实用的



Bogo排序
臭皮匠排序








图



拓扑排序











搜索




列表



线性搜索
二分搜索








树・图



广度优先搜索

最良优先搜索（英语：Best-first search）
均一开销搜索
A*


深度优先搜索

迭代深化深度优先搜索
深度限制搜索（日语：深さ制限探索）


双方向探索（英语：Bidirectional search）
分枝限定法（英语：Branch and bound）








字符串



克努斯-莫里斯-普拉特算法
Boyer-Moore字符串搜索算法
AC自动机算法
Rabin-Karp算法（英语：Rabin–Karp algorithm）
位图算法（英语：Bitap algorithm）











最短路问题



戴克斯特拉算法
贝尔曼-福特算法
Floyd-Warshall算法








最小生成树



普林姆算法
克鲁斯克尔算法








最大流
最小割（英语：Minimum cut）



Ford–Fulkerson算法
Edmonds–Karp算法








线性规划



单纯形法
Karmarkar算法（英语：Karmarkar's algorithm）








顺序统计量



选择算法
中位数的中位数（英语：Median of medians）








种类



近似算法
随机化算法








其他



分治法
动态规划
贪心法









Category:算法














查
论
编


计算机科学的主要领域







注：该模板大致遵循ACM-2012计算分类系统。






电脑硬件



印刷电路板
外部设备
集成电路
超大规模集成电路
绿色计算
电子设计自动化








系统架构组织



电脑系统架构
嵌入式系统
实时计算








网络



网络传输协议
路由
网络拓扑
网络服务








软件组织



解释器
中间件
虚拟机
操作系统
软件质量








软件符号和工具



编程范型
编程语言
编译器
领域特定语言
软件框架
集成开发环境
软件配置管理
库








软件开发



软件开发过程
需求分析
软件设计
软件部署
软件维护
开源模式








计算理论



自动机
可计算性理论
计算复杂性理论
量子计算
数值计算方法
计算机逻辑
形式语义学








算法



算法分析
算法设计
随机化算法
计算几何








计算数学

离散数学 · 概率 · 统计学 · 数学软件 · 数理逻辑 · 集合论 · 数论 · 图论 · 类型论 · 范畴论 · 信息论 · 数值分析 · 数学分析






信息系统



数据库管理系统
电脑数据
企业信息系统（英语：Enterprise information system）
社会性软件
地理信息系统
决策支持系统
过程控制
数据挖掘
数字图书馆
系统平台
数字营销
万维网
信息检索








安全



密码学
形式化方法
入侵检测系统
网络安全
信息安全








人机交互

计算机辅助功能 · 用户界面 · 可穿戴计算机 · 普适计算 · 虚拟现实 · 聊天机器人






并发性



并发计算
并行计算
分布式计算
多线程
多元处理








人工智能

自动推理 · 计算语言学 · 计算机视觉 · 进化计算 · 专家系统 · 自然语言处理 · 机器人学






机器学习



监督式学习
非监督式学习
强化学习
交叉验证








计算机图形学



计算机动画
可视化
渲染
修饰照片
图形处理器
混合现实
虚拟现实
图像处理
图像压缩
实体造型








应用计算



电子商务
企业级软件
计算数学
计算物理学
计算化学
计算生物学
计算社会科学
医学信息学
数字艺术
电子出版
网络战
电子游戏
文字处理器
运筹学
教育技术学
生物信息学
认知科学
文件管理系统（英语：Document management system）











 分类
 主题
专题
 维基共享













规范控制



LCCN: sh85003487
GND: 4001183-5
BNF: cb119358199（数据）
NDL: 00560337
BNE: XX527980












分类：代数算法计算机科学理论计算机科学问题解决隐藏分类：含有过时参数的引用的页面含有访问日期但无网址的引用的页面需要校对的页面含有英语的条目含有波斯语的条目包含规范控制信息的维基百科条目